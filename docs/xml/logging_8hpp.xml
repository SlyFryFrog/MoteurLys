<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="logging_8hpp" kind="file" language="C++">
    <compoundname>logging.hpp</compoundname>
    <includes local="no">fstream</includes>
    <includes local="no">mutex</includes>
    <includes local="no">print</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includedby refid="file_8cpp" local="yes">LilyPadEngine/src/LilyPad/core/io/file.cpp</includedby>
    <includedby refid="image_8cpp" local="yes">LilyPadEngine/src/LilyPad/core/io/image.cpp</includedby>
    <includedby refid="logging_8cpp" local="yes">LilyPadEngine/src/LilyPad/debug/logging.cpp</includedby>
    <includedby refid="shader__program_8cpp" local="yes">LilyPadEngine/src/LilyPad/renderer/OpenGL/shaders/shader_program.cpp</includedby>
    <includedby refid="texture_8cpp" local="yes">LilyPadEngine/src/LilyPad/renderer/OpenGL/texture.cpp</includedby>
    <includedby refid="window_8cpp" local="yes">LilyPadEngine/src/LilyPad/renderer/OpenGL/window.cpp</includedby>
    <includedby refid="node_8hpp" local="yes">LilyPadEngine/src/LilyPad/scene/nodes/core/node.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>LilyPadEngine/src/LilyPad/debug/logging.hpp</label>
        <link refid="logging_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>mutex</label>
      </node>
      <node id="4">
        <label>print</label>
      </node>
      <node id="5">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>LilyPadEngine/src/LilyPad/debug/logging.hpp</label>
        <link refid="logging_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>LilyPadEngine/src/LilyPad/scene/nodes/3d/camera_3d.hpp</label>
        <link refid="camera__3d_8hpp_source"/>
      </node>
      <node id="3">
        <label>LilyPadEngine/src/LilyPad/scene/nodes/3d/node_3d.hpp</label>
        <link refid="node__3d_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>LilyPadEngine/src/LilyPad/scene/nodes/core/node.hpp</label>
        <link refid="node_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>LilyPadEngine/src/LilyPad/scene/nodes/ui/label.hpp</label>
        <link refid="label_8hpp_source"/>
      </node>
      <node id="5">
        <label>LilyPadEngine/src/LilyPad/scene/nodes/ui/widget.hpp</label>
        <link refid="widget_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structLilyPad_1_1LogColors" prot="public">LilyPad::LogColors</innerclass>
    <innerclass refid="classLilyPad_1_1Logger" prot="public">LilyPad::Logger</innerclass>
    <innernamespace refid="namespaceLilyPad">LilyPad</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="logging_8hpp_1aeff793d14fd77b2ad8052859532743c7" prot="public" static="no">
        <name>LILYPAD_DEBUG</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="classLilyPad_1_1Logger_1a47a1f01494530476536fd701ca32bc71" kindref="member">LilyPad::Logger::get_singleton</ref>()-&gt;log(LilyPad::LogLevel::DEBUG, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LilyPadEngine/src/LilyPad/debug/logging.hpp" line="9" column="9" bodyfile="LilyPadEngine/src/LilyPad/debug/logging.hpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="logging_8hpp_1acb12ac3f4954df2cdc4c72e13dad1a4d" prot="public" static="no">
        <name>LILYPAD_INFO</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="classLilyPad_1_1Logger_1a47a1f01494530476536fd701ca32bc71" kindref="member">LilyPad::Logger::get_singleton</ref>()-&gt;log(LilyPad::LogLevel::INFO, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LilyPadEngine/src/LilyPad/debug/logging.hpp" line="10" column="9" bodyfile="LilyPadEngine/src/LilyPad/debug/logging.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="logging_8hpp_1a87d99e137365669fd3cbc71b651149f0" prot="public" static="no">
        <name>LILYPAD_WARNING</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="classLilyPad_1_1Logger_1a47a1f01494530476536fd701ca32bc71" kindref="member">LilyPad::Logger::get_singleton</ref>()-&gt;log(LilyPad::LogLevel::WARNING, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LilyPadEngine/src/LilyPad/debug/logging.hpp" line="11" column="9" bodyfile="LilyPadEngine/src/LilyPad/debug/logging.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="logging_8hpp_1ad481588b6efc40e5b29ce8514f284541" prot="public" static="no">
        <name>LILYPAD_ERROR</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="classLilyPad_1_1Logger_1a47a1f01494530476536fd701ca32bc71" kindref="member">LilyPad::Logger::get_singleton</ref>()-&gt;log(LilyPad::LogLevel::ERROR, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LilyPadEngine/src/LilyPad/debug/logging.hpp" line="12" column="9" bodyfile="LilyPadEngine/src/LilyPad/debug/logging.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="logging_8hpp_1a59cb0110dc1c0e78c296e3c5a580f2be" prot="public" static="no">
        <name>LILYPAD_CRITICAL</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="classLilyPad_1_1Logger_1a47a1f01494530476536fd701ca32bc71" kindref="member">LilyPad::Logger::get_singleton</ref>()-&gt;log(LilyPad::LogLevel::CRITICAL, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LilyPadEngine/src/LilyPad/debug/logging.hpp" line="13" column="9" bodyfile="LilyPadEngine/src/LilyPad/debug/logging.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;print&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LILYPAD_DEBUG(...)<sp/>LilyPad::Logger::get_singleton()-&gt;log(LilyPad::LogLevel::DEBUG,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LILYPAD_INFO(...)<sp/>LilyPad::Logger::get_singleton()-&gt;log(LilyPad::LogLevel::INFO,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LILYPAD_WARNING(...)<sp/>LilyPad::Logger::get_singleton()-&gt;log(LilyPad::LogLevel::WARNING,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LILYPAD_ERROR(...)<sp/>LilyPad::Logger::get_singleton()-&gt;log(LilyPad::LogLevel::ERROR,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LILYPAD_CRITICAL(...)<sp/>LilyPad::Logger::get_singleton()-&gt;log(LilyPad::LogLevel::CRITICAL,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">LilyPad</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>LogLevel</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INFO,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WARNING,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRITICAL</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="structLilyPad_1_1LogColors" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structLilyPad_1_1LogColors" kindref="compound">LogColors</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>DEFAULT;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>DEBUG;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>INFO;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>WARNING;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>ERROR;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>CRITICAL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classLilyPad_1_1Logger" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classLilyPad_1_1Logger" kindref="compound">Logger</ref></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classLilyPad_1_1Logger" kindref="compound">Logger</ref><sp/>*_singleton;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classLilyPad_1_1Logger" kindref="compound">Logger</ref><sp/>*<ref refid="classLilyPad_1_1Logger_1a47a1f01494530476536fd701ca32bc71" kindref="member">get_singleton</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">Args</ref>&gt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogLevel<sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">level</ref>,<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">Args</ref>...<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">args</ref>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignores<sp/>any<sp/>logging<sp/>lower<sp/>than<sp/>the<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classLilyPad_1_1Vertices" kindref="compound">level</ref><sp/>&lt;<sp/>_minLogLevel<sp/>||<sp/>(_writeLogs<sp/>&amp;&amp;<sp/>_showLogs))</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">logStream</ref>;<sp/></highlight><highlight class="comment">//<sp/>Writes<sp/>all<sp/>logs<sp/>to<sp/>stream<sp/>before<sp/>outputting<sp/>to<sp/>console/file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>timestamp<sp/>next<sp/>to<sp/>the<sp/>log<sp/>type<sp/>and<sp/>message<sp/>if<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_timeFormat<sp/>&amp;&amp;<sp/>_showTimestamp)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">logStream</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>get_log_type(<ref refid="classLilyPad_1_1Vertices" kindref="compound">level</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>get_formatted_time(_timeFormat)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">logStream</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>get_log_type(<ref refid="classLilyPad_1_1Vertices" kindref="compound">level</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_to_stream(<ref refid="classLilyPad_1_1Vertices" kindref="compound">logStream</ref>,<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">args</ref>...);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">logMessage</ref><sp/>=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">logStream</ref>.str();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_showLogs)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_log(<ref refid="classLilyPad_1_1Vertices" kindref="compound">level</ref>,<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">logMessage</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_writeLogs)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">guard</ref>(_logMutex);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">fileStream</ref>(_file,<sp/>std::ios::app);<sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>mode<sp/>to<sp/>append</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classLilyPad_1_1Vertices" kindref="compound">fileStream</ref>.is_open())</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">fileStream</ref><sp/>&lt;&lt;<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">logMessage</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::println(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>the<sp/>log<sp/>file<sp/>at<sp/>&quot;</highlight><highlight class="normal">,<sp/>_file);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLilyPad_1_1Logger_1ab53a3ed1219690f2a9370f8304858aef" kindref="member">set_log_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">file</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLilyPad_1_1Logger_1a62135d1966e7b4040d24db6db2df3752" kindref="member">set_log_level</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogLevel<sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">level</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLilyPad_1_1Logger" kindref="compound">Logger</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLilyPad_1_1Logger" kindref="compound">~Logger</ref>();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_log(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogLevel<sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">level</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">message</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Arg&gt;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>append_to_stream(std::stringstream<sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">stream</ref>,<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">Arg</ref><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">arg</ref>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">stream</ref><sp/>&lt;&lt;<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">arg</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">Arg</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">Args</ref>&gt;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>append_to_stream(std::stringstream<sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">stream</ref>,<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">Arg</ref><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">arg</ref>,<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">Args</ref>...<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">args</ref>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">stream</ref><sp/>&lt;&lt;<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">arg</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_to_stream(<ref refid="classLilyPad_1_1Vertices" kindref="compound">stream</ref>,<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">args</ref>...);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*get_log_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogLevel<sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">level</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[<ref refid="classLilyPad_1_1Vertices" kindref="compound">nodiscard</ref>]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>get_formatted_time(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>*<ref refid="classLilyPad_1_1Vertices" kindref="compound">timeFormat</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_showLogs;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_writeLogs;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_showTimestamp;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::mutex<sp/>_logMutex;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>_file;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>*_timeFormat;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogLevel<sp/>_minLogLevel;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>LilyPad</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="LilyPadEngine/src/LilyPad/debug/logging.hpp"/>
  </compounddef>
</doxygen>
