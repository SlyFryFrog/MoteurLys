<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="vector3_8hpp" kind="file" language="C++">
    <compoundname>vector3.hpp</compoundname>
    <includes local="no">glm/glm.hpp</includes>
    <includes refid="typedef_8hpp" local="yes">LilyPad/core/utils/typedef.hpp</includes>
    <includedby refid="vector3_8cpp" local="yes">LilyPadEngine/src/LilyPad/core/math/vector3.cpp</includedby>
    <includedby refid="camera__3d_8hpp" local="yes">LilyPadEngine/src/LilyPad/scene/nodes/3d/camera_3d.hpp</includedby>
    <includedby refid="node__3d_8hpp" local="yes">LilyPadEngine/src/LilyPad/scene/nodes/3d/node_3d.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>LilyPadEngine/src/LilyPad/core/math/vector3.hpp</label>
        <link refid="vector3_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>LilyPad/core/utils/typedef.hpp</label>
        <link refid="typedef_8hpp_source"/>
      </node>
      <node id="2">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>LilyPadEngine/src/LilyPad/core/math/vector3.hpp</label>
        <link refid="vector3_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>LilyPadEngine/src/LilyPad/scene/nodes/3d/camera_3d.hpp</label>
        <link refid="camera__3d_8hpp_source"/>
      </node>
      <node id="3">
        <label>LilyPadEngine/src/LilyPad/scene/nodes/3d/node_3d.hpp</label>
        <link refid="node__3d_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structLilyPad_1_1Vector3" prot="public">LilyPad::Vector3</innerclass>
    <innernamespace refid="namespaceLilyPad">LilyPad</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glm/glm.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LilyPad/core/utils/typedef.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">LilyPad</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8" refid="structLilyPad_1_1Vector3" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp_type<sp/>x;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp_type<sp/>y;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp_type<sp/>z;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref>(fp_type<sp/>x,<sp/>fp_type<sp/>y,<sp/>fp_type<sp/>z);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[<ref refid="classLilyPad_1_1Vertices" kindref="compound">nodiscard</ref>]]<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>cross(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>cross(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">vector_a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">vector_b</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>normalize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">vector</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[<ref refid="classLilyPad_1_1Vertices" kindref="compound">nodiscard</ref>]]<sp/>fp_type<sp/>dot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fp_type<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x<sp/>+<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>y<sp/>+<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>z<sp/>+<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>};<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fp_type<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x<sp/>-<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>y<sp/>-<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>z<sp/>-<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>};<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fp_type<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x<sp/>*<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>y<sp/>*<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>z<sp/>*<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>};<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator/(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fp_type<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x<sp/>/<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>y<sp/>/<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>z<sp/>/<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>};<sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fp_type<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="33"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x<sp/>+<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>y<sp/>+<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/>z<sp/>+<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x<sp/>+<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.x,<sp/>y<sp/>+<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.y,<sp/>z<sp/>+<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.z};<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x<sp/>-<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.x,<sp/>y<sp/>-<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.y,<sp/>z<sp/>-<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.z};<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x<sp/>*<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.x,<sp/>y<sp/>*<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.y,<sp/>z<sp/>*<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.z};<sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator/(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x<sp/>/<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.x,<sp/>y<sp/>/<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.y,<sp/>z<sp/>/<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.z};<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.x;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.y;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.z;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.x;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.y;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>-=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.z;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator*=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.x;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>*=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.y;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>*=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.z;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator/=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.x;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>/=<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>.y;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">operator&lt;=&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">other</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FORCE_INLINE_<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>glm::vec3()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{x,<sp/>y,<sp/>z};<sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>&amp;<ref refid="classLilyPad_1_1Vertices" kindref="compound">vec</ref>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<ref refid="classLilyPad_1_1Vertices" kindref="compound">vec</ref>.x<sp/>*<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">vec</ref>.y<sp/>*<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>,<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">vec</ref>.z<sp/>*<sp/><ref refid="classLilyPad_1_1Vertices" kindref="compound">scalar</ref>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[<ref refid="classLilyPad_1_1Vertices" kindref="compound">nodiscard</ref>]]<sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/>normalize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Vector3</ref><sp/><ref refid="structLilyPad_1_1Vector3" kindref="compound">Position3</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>LilyPad</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="LilyPadEngine/src/LilyPad/core/math/vector3.hpp"/>
  </compounddef>
</doxygen>
